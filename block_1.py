# 1.Как получить список всех атрибутов объекта
dir(obj)

# 2.Как получить список всех публичных атрибутов объекта
for str in dir(obj):
	if not str.startswith('__') and not str.endswith('__'):
		print str

# 3.Как получить список методов объекта
for str in dir(obj):
	if callable(getattr(obj, str)):
		print str

# 4.В какой "магической" переменной хранится содержимое help?
obj.__doc__

# 5.Есть два кортежа, получить третий как конкатенацию первых двух
t = (1, 2, 3, 4)
s = (5, 6)
r = t + s

# 6.Есть два кортежа, получить третий как объединение уникальных элементов первых двух кортежей
t = (1, 2, 3, 4)
s = (1, 5, 3, 6, 7)
r = tuple(set(t + s))

# 7.Почему если в цикле меняется список, то используется for x in lst[:], что означает [:]?
"""
[:] означает срез в python, создается копия списка и далее делается цикл по его элементам. 
Обрабатываем элементы в списке, согласно их расположению, т. е.
Изменения в исходном списке не повлияют на итерацию по исходным значениям.
"""

# 8.Есть два списка одинаковой длины, в одном ключи, в другом значения. Составить словарь.
val = (1, 2, 3)
key = ('one', 'two', 'three')
result = dict(zip(key, val))

# 9.Есть два списка разной длины, в одном ключи, в другом значения. Составить словарь. 
# Для ключей, для которых нет значений использовать None в качестве значения. Значения, для которых нет ключей игнорировать.
val = (1, 2, 3)
key = ('one', 'two', 'three')
if len(key) > len(val):
	result = dict(map(None, key, val))
else:
	result = dict(zip(val, key))

# 10.Есть словарь. Инвертировать его. Т.е. пары ключ: значение поменять местами — значение: ключ.
result = {1:'one', 2:'two', 3:'three'}
print dict(zip(result.keys(), result.values()))

# 11.Есть строка в юникоде, получить 8-битную строку в кодировке utf-8 и cp1251
str = u'test'
print str.encode('utf-8')
print str.encode('cp1251')

# 12.Есть строка в кодировке cp1251, получить юникодную строку
str = 'string'
print str.decode('cp1251')
